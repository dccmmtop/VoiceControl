package top.dc; /**
 * @author dc on 2023/4/22
 */


import org.vosk.LibVosk;
import org.vosk.LogLevel;
import org.vosk.Model;
import org.vosk.Recognizer;

import java.io.FileInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Arrays;
import java.util.concurrent.*;

import javax.sound.sampled.*;


public class Main {

    public static void main(String[] argv) throws IOException, UnsupportedAudioFileException, LineUnavailableException {

        int corePoolSize = 2;
        int maxPoolSize = 10;
        long keepAliveTime = 10;
        TimeUnit unit = TimeUnit.SECONDS;
        BlockingQueue<Runnable> workQueue = new ArrayBlockingQueue<>(500);

        ThreadPoolExecutor executor = new ThreadPoolExecutor(corePoolSize, maxPoolSize, keepAliveTime, unit, workQueue);


        LibVosk.setLogLevel(LogLevel.DEBUG);

        String wav = "D:\\Go_Path\\1.20\\pkg\\mod\\github.com\\alphacep\\vosk-api@v0.3.45\\python\\example\\test.wav";

        // 打开麦克风
        AudioFormat format = new AudioFormat(16000.0f, 16, 1, true, false);

        try (Model model = new Model("D:\\vosk-model-small-cn-0.22\\model");
             InputStream ais = AudioSystem.getAudioInputStream(new BufferedInputStream(new FileInputStream(wav)));
             Recognizer recognizer = new Recognizer(model, 16000)) {
            TargetDataLine microphone = AudioSystem.getTargetDataLine(format);
            microphone.open(format);
            microphone.start();
            // 从麦克风读取音频并进行实时识别
            int numBytesRead;
            byte[] data = new byte[4096];
            while ((numBytesRead = microphone.read(data, 0, data.length)) != -1) {

                byte[] dataCopy = Arrays.copyOf(data, data.length);
                executor.execute(new Task(recognizer,dataCopy, numBytesRead));
            }
            executor.shutdown();

            // 关闭识别器和麦克风
            recognizer.close();
            microphone.stop();
            microphone.close();
        }
    }
}

class Task implements Runnable{


    private final Recognizer recognizer;
    private final byte[] data;
    private final int numBytesRead;

    public Task(Recognizer recognizer, byte[] data, int numBytesRead) {
        this.recognizer = recognizer;
        this.data = data;
        this.numBytesRead = numBytesRead;
    }

    @Override
    public void run() {
        try {

            // 将音频数据传递给 Vosk 进行识别
            if (recognizer.acceptWaveForm(data, numBytesRead)) {
                String result = recognizer.getResult();
                System.out.println(result);
            }else{
//            System.out.println( recognizer.getPartialResult() );
            }
        }catch (
                Throwable e
        ){
            System.out.println(e.getMessage());
        }
        System.out.println("end");

    }
}
